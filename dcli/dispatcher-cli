#!/usr/bin/python

# interface for dispatcher

import argparse
import sys
import socket

def Login(socket, s, v):
    if (v.verbosity > 0):
        print "sending data: " + "auth " + s + " " + v.token
    socket.send("auth " + s + " " + v.token + "\n");
    result = socket.recv(256);
    if (not "OK" in result):
        print "Authentication failed: " + result
        sys.exit(0)

def CreateXml(vars):
    result = "<items>\n<item" 
    if type(vars.page) is str:
        result = result + ' page="' + vars.page + '"'
    if type(vars.px) is str:
        result = result + ' page_rx="' + vars.px + '"'
    if type(vars.ux) is str:
        result = result + ' user_rx="' + vars.ux + '"'
    if type(vars.user) is str:
        result = result + ' user="' + vars.page + '"'
    result = result + '>' + vars.wiki + '</item>' + " \n</items>"
    return result 

def ParameterCheck(vars):
    ok=False
    if type(vars.page) is str or type(vars.px) is str or  type(vars.ux) is str or type (vars.user) is str:
        ok = True
    if not ok:
        print "You need to provide --pagerx or --page and --user";
        return False
    if not type(vars.wiki) is str:
        print "You need to provide --wiki";
        return False
    if not type(vars.token) is str:
        print "You need to provide --token";
        return False
    return True

#set up some default vars

DispatcherPort=29438

# read config - this proves how crappy python is, we don't need to do it now, why should we,
# but in python there is almost no other way... so we do it now to save typing of code
# even if it reads the file no matter if it really need to use it or not which eats resources
# we don't need to use

with open ("/data/project/dispatcher/hostname", "r") as myfile:
    DispatcherHost=myfile.read().replace('\n', '')

parser = argparse.ArgumentParser(description='Command line interface for dispatcher daemon. Dispatcher is an utility that let you subscribe to RC feed in order to get notified about changes to selected pages. (In this moment only redis queues are supported)')
parser.add_argument('--token', dest='token', help='Secret token that needs to be provided in order to modify existing subscription')
parser.add_argument('--unsubscribe', dest='un_subscription', help='Remove a subscription with a given name.')
parser.add_argument('--subscribe', dest='subscription', help='Create a subscription with a given name. This name must be system unique')
parser.add_argument('--insert', dest='insert', help='Insert a data to subscription with a given name. You need to provide token, wiki and page or user (or both)')
parser.add_argument('--remove', dest='remove', help='Remove a data from subscription with a given name. You need to provide token, wiki and page or user (or both)')
parser.add_argument('--wiki', dest='wiki', help='Specify a name of wiki to watch, this argument is needed for insert and remove')
parser.add_argument('--page', dest='page', help='Name of a page to watch (case sensitive)')
parser.add_argument('--pagerx', dest='px', help='Regular expression the page name should match')
parser.add_argument('--user', dest='user', help='Username to watch')
parser.add_argument('--list', dest='list', help='List all items in a subscription')
parser.add_argument('--verbosity', dest='verbosity', type=int, help='Higher the number is, more verbose I will be')
parser.add_argument('--userrx', dest='ux', help='Regular expression that username should match')
parser.add_argument('--alter', dest='alter' help= Allow you to alter configuration of subscription')
parser.add_argument('--format', dest='format' help='Let you specify which format you want to have for output you can choose from xml, pipe, json')

args = parser.parse_args()
if not type(args.verbosity) is int:
    args.verbosity = 0

if type(args.remove) is str:
    if ParameterCheck(args):
        print "Logging to a subscription"
        _socket = socket.socket();
        _socket.connect((DispatcherHost, DispatcherPort))
        Login(_socket, args.remove, args)
        print "Attempting to remove data from subscription"
        if (args.verbosity > 0):
            print "sending data: remove xml"
            print CreateXml(args)
        _socket.send("remove xml\n")
        _socket.send(CreateXml(args) + "\n")
        print "Removed: " + _socket.recv(64)
        _socket.close()
        _socket.close()
        sys.exit(0)

if type(args.insert) is str:
    if ParameterCheck(args):
        print "Logging to a subscription"
        _socket = socket.socket();
        _socket.connect((DispatcherHost, DispatcherPort))
        Login(_socket, args.insert, args)
        print "Attempting to insert data"
        if (args.verbosity > 0):
            print "sending data: insert xml"
            print CreateXml(args)
        _socket.send("insert xml\n")
        _socket.send(CreateXml(args) + "\n")
        print "Inserted: " + _socket.recv(64)
        _socket.close()
        sys.exit(0)

if type(args.subscription) is str:
        print "Attempting to create new subscription " + args.subscription
        _socket = socket.socket()
        _socket.connect((DispatcherHost, DispatcherPort))
        _socket.send("subscribe " + args.subscription + "\n")
        print _socket.recv(256);
        if str is type(args.format):
            print "Changing a format"
            _socket.send("format " + args.format);
            print _socket.recv(256)
        _socket.close()
        sys.exit(0);

if type(args.un_subscription) is str:
        if not type(args.token) is str:
            print "You need to provide a token for this"
            sys.exit(-1)
        print "Attempting to remove subscription " + args.un_subscription
        _socket = socket.socket()
        _socket.connect((DispatcherHost, DispatcherPort))
        _socket.send("unsubscribe " + args.un_subscription + " " + args.token + "\n")
        print _socket.recv(256)
        _socket.close()
        sys.exit(0)

if type(args.alter) is str:
    if not type(args.token) is str:
        print "You need to provide a token for this"
        sys.exit(-1)
    print "Logging to a subscription"
    _socket = socket.socket();
    _socket.connect((DispatcherHost, DispatcherPort))
    Login(_socket, args.insert, args)
    print "Attempting to alter " + args.alter
    if str is type(args.format):
        print "Changing a format"
        _socket.send("format " + args.format);
        print _socket.recv(256)
    _socket.close()
    sys.exit(0)


print "You need to provide some arguments, see --help"
